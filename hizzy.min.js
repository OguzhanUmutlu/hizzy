#!/usr/bin/env node
const self=module.exports={},sT=Date.now(),fs=(global.__sT__=sT,global.__PRODUCT__="hizzy",global.__PRODUCT_U__="Hizzy",global.__VERSION__=require("./package.json").version,require("fs")),dotenv=require("dotenv"),path=require("path"),os=require("os"),argv=process["argv"],exit=(require("fancy-printer").makeGlobal(!0),dotenv.config(),(...e)=>{printer.dev.error(...e),process.exit(1)}),checkDefault=(printer.title(__PRODUCT_U__+" v"+__VERSION__),printer.makeGlobal(!0).setOptions({format:e=>printer.css("color: "+printer.getTag(e.tag||"log").c)+"  %tag  %time %stack > %text",timeBackgroundColor:"",timeColor:"",stackColor:"",filenameColor:"",lineColor:"",columnColor:"",timePadding:0,tagPadding:0,styleSubstitutionsEnabled:!0}),printer.dev=printer.create({format:e=>printer.css("color: "+printer.getTag(e.tag||"log").c)+"  %tag  %text",tagPadding:0,styleSubstitutionsEnabled:!0}),printer.tags=printer.dev.tags={pass:{text:"✓",c:"greenBright",textColor:"green"},fail:{text:"X",c:"redBright",textColor:"redBright"},error:{text:"",c:"red",textColor:"red"},warn:{text:"✩",c:"yellow",textColor:"yellow"},info:{text:"?",c:"blueBright",textColor:"blue"},debug:{text:"~",c:"gray",textColor:"gray"},notice:{text:"!",c:"cyanBright",textColor:"cyan"},log:{text:'"',c:"gray",textColor:"white"},assert:{text:">",c:"white",textColor:"gray"}},printer.inline.options.format="%text",Object.keys(printer.styles).forEach(e=>{"t"!==e&&(delete printer.styles[e],delete printer.dev.styles[e])}),(e,r={},o=[])=>{var t,i=[];for(const n in r)void 0===e[n]&&(e[n]=r[n],i.push([...o,n])),e[n].constructor===Object&&"addons"!==n&&"static"!==n&&(t=checkDefault(e[n],r[n],[...o,n]),i.push(...t));return i}),propExpect=(e,r,o)=>exit("The config file %c"+__PRODUCT__+".json%c's %c"+e+"%c property was expected as: %c"+r+"%c, got:%c","color: orange","color: red","color: orange","color: red","color: orange","color: red","color: orange",o),isTerminal=require.main===module;isTerminal||exit(__PRODUCT_U__+"'s module mode has not been developed yet. Its API can still be reached by importing/requiring '"+__PRODUCT__+"/api'.");let dir=process.cwd(),file;const args=argv.slice(2).filter(e=>!e.startsWith("-")),optList=argv.slice(2).filter(e=>e.startsWith("-")),_argv_={},shortcuts={"-h":"help","-v":"version","-b":"build","-p":"port","-d":"dev","-o":"open","-c":"config","-f":"force"};if(optList.forEach(e=>{e=e.toLowerCase();e=(e=shortcuts[e]?"--"+shortcuts[e]:e).substring(2).split("=");_argv_[e[0]]=e[1]&&e.slice(1).join("=")||!0}),Object.freeze(_argv_),self.args=_argv_,isTerminal&&_argv_.help&&(printer.raw.log("%c  "+__PRODUCT_U__+" v"+__VERSION__,"color: yellow"),printer.println(""),printer.raw.log("%c  Usage: "+__PRODUCT__+" [root]","color: magenta"),printer.println(""),printer.raw.log("%c  Options:","color: orange"),printer.raw.log("%c    -h, --help%c               shows this page","color: green","color: yellow"),printer.raw.log("%c    -v, --version%c            shows the version","color: green","color: yellow"),printer.raw.log("%c    --advanced-version%c       shows advanced information","color: green","color: yellow"),printer.raw.log("%c    -b, --build%c              only builds the project and exits","color: green","color: yellow"),printer.raw.log("%c    --host%c                   toggles the view of IPv4","color: green","color: yellow"),printer.raw.log("%c    --config=PATH%c            sets the config file's path","color: green","color: yellow"),printer.raw.log("%c    -p=PORT, --port=PORT%c     sets the port (0 = random)","color: green","color: yellow"),printer.raw.log("%c    -f, --force%c              forces auto build","color: green","color: yellow"),printer.raw.log("%c    -d, --dev%c                enables developer mode","color: green","color: yellow"),printer.raw.log("%c    -o, --open%c               opens the app on start","color: green","color: yellow"),printer.raw.log("%c    --debug%c                  enables debug messages","color: green","color: yellow"),printer.raw.log("%c    --debug-socket%c           sends debug messages of sockets","color: green","color: yellow"),printer.raw.log("%c    --injections%c             builds html/jsx injection files","color: green","color: yellow"),printer.raw.log("%c    --addon-init%c             initializes up an addon environment","color: green","color: yellow"),printer.raw.log("%c    --no-clear%c               disables the initial screen clear","color: green","color: yellow"),process.exit()),isTerminal&&_argv_.version&&(printer.raw.log(__PRODUCT_U__+" v"+__VERSION__),process.exit()),isTerminal&&_argv_["advanced-version"]&&(printer.raw.log(`${__PRODUCT__}: v${__VERSION__}
node: ${process.version}
device: ${os.platform()}-`+os.arch()),process.exit()),isTerminal&&_argv_["addon-init"]){const s=args[0],t=(s||exit("Usage: npx hizzy --addon-init YourAddonName"),/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(s)||exit("Please select a valid addon name!"),path.join(process.cwd(),s));fs.existsSync(path.join(t,s))&&exit("There is already a directory at '%c"+t+"$t'!","color: orange"),fs.mkdirSync(path.join(t,s)),fs.writeFileSync(path.join(t,s,"index.js"),`const {AddonModule} = Hizzy;
module.exports = class MyAddon extends AddonModule {
    onLoad() {
        this.log("Loaded!");
    };

    onEnable() {
        this.log("Enabled!");
    };

    onDisable(reason) {
        this.log("Disabled for the reason:", reason);
    }

    onClientSideLoad() {
        this.log("Addon has been loaded in client side!");
    };

    onClientSideRendered() {
        this.log("A page has been rendered in the client side!");
    };

    onClientSideError(error) {
        this.log("An error occurred in the client side:", error);
    };
};`),fs.writeFileSync(path.join(t,s,"package.json"),`{
  "name": ${JSON.stringify(s)},
  "description": "This is an addon!",
  "version": "1.0.0",
  "main": "index.js"
}`),printer.raw.pass("A new addon has been set up at: %c"+s,"color: orange"),process.exit()}if(_argv_.build||_argv_["no-clear"]||(printer.clear(),printer.print("\n")),isTerminal&&args[0]){const u=path.join(process.cwd(),args[0]);fs.existsSync(u)||exit("Couldn't open the file %c'"+u+"'%c.","color: orange","color: red"),dir=fs.statSync(u).isDirectory()?u:(file=u,path.dirname(u))}(async()=>{var r=path.join(dir,_argv_.config||__PRODUCT__+".json"),e=fs.existsSync(r),o={dev:!0,port:-1,fileRefresh:!0,autoBuild:!0,listen:!0,main:"Server.jsx",mainModule:!0,checkConfig:!0,realtime:!0,static:{static:""},https:!1,srcFolder:"src",connectionTimeout:6e4,keepaliveTimeout:3e4,clientKeepalive:2e4,minClientKeepalive:8e3,addons:[],includeOriginalInBuild:!0};e&&fs.statSync(r).isFile()||(e&&fs.rmSync(r),_argv_.debug&&printer.dev.debug("Creating the %c/"+__PRODUCT__+".json&t file...","color: orange"),fs.writeFileSync(r,JSON.stringify(o,null,2)));let t={};try{t=JSON.parse(fs.readFileSync(r,"utf8"))}catch(e){return exit("Invalid JSON in the file %c'"+r+"'%c: %c"+e.toString()+"%c.","color: orange","color: red","color: orange","color: red")}var e=t.checkConfig,i=checkDefault(t,o);if(!_argv_.build&&i.length&&e&&(fs.writeFileSync(r,JSON.stringify(t,null,2)),printer.dev.warn("Updated following properties in "+__PRODUCT__+".json: "+i.map(e=>e.join("->")).join(", "))),Array.isArray(t.extensionRemovals)||(t.extensionRemovals=o.extensionRemovals),t.extensionRemovals=[...new Set(t.extensionRemovals)],-1!==t.keepaliveTimeout&&t.clientKeepalive>=t.keepaliveTimeout)return exit("Config's 'clientKeepalive' property has to be smaller than 'keepaliveTimeout'.");Object.freeze(t),self.config=t,_argv_.debug||(printer.options.disabledTags.push("debug"),printer.dev.options.disabledTags.push("debug"));e=fs.existsSync(path.join(dir,".build")),r=path.join(dir,t.srcFolder),i=fs.existsSync(r),i&&fs.statSync(r).isDirectory()||(e?printer.dev.debug("Skipping the creation of %c/"+t.srcFolder+"&t because there is an existing build.","color: orange"):(i&&fs.rmSync(r),printer.dev.debug("Creating the %c/"+t.srcFolder+"&t folder...","color: orange"),fs.mkdirSync(r),fs.writeFileSync(path.join(r,"App.jsx"),`const foo = 20;
export default <div>Hello, world! { foo * 2 }</div>`))),self.config=t,o=path.join(__dirname,"api.js"),e=path.join(__dirname,"api.min.js"),global[__PRODUCT_U__]=new(require(fs.existsSync(o)?o:e))(dir),i=path.join(dir,t.srcFolder,t.main),r=path.extname(i);if(fs.existsSync(i)||(printer.dev.debug("Creating the %c/src/"+t.main+"&t file...","color: orange"),fs.writeFileSync(i,{".jsx":`export default <Routes>
    <Route path="/" route="./App.jsx"/>
</Routes>;`}[r])),_argv_.build)_argv_["just-build"]=!0,Hizzy.build().then(()=>process.exit());else{var n=e=>null===e?"null":e&&e.constructor===Array?"array":typeof e;if("object"!=typeof t.addons)return exit("Config's 'conf.addons' property has to be an object or an array, got: "+n(t.addons)+".");if(0<Object.keys(t.addons).length){var s=t.addons;if(Array.isArray(s))for(let e=0;e<s.length;e++){var a=s[e];if("string"==typeof a)await Hizzy.Addon.create(a,{});else{if(!Array.isArray(a))return exit("Config's 'conf.addons["+e+"]' property should either be an array or a string, got: "+n(k));if(a[1]&&a[1].constructor!==Object)return exit("Config's 'conf.addons["+e+"][1]' property should be an object or empty, got: "+n(a[1]));await Hizzy.Addon.create(a[0],a[1])}}else for(const k in s){if(s[k].constructor!==Object)return exit("Config's 'conf.addons["+k+"] property should be an object, got: "+n(s[k]));await Hizzy.Addon.create(k,s[k])}}await Hizzy.init(),(_argv_.dev||t.dev)&&(Hizzy.dev=!0,await Hizzy.processMain(Hizzy.jsxToJS(fs.readFileSync(i),r))),t.realtime&&Hizzy.enableRealtime(),t.fileRefresh&&(Hizzy.autoRefresh=!0),Hizzy.dev?t.listen&&Hizzy.listen().then(e=>e):_argv_.build||t.autoBuild||_argv_.force?Hizzy.build().then(e=>e):t.listen&&Hizzy.scanBuild().then(e=>e)}})();